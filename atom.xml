<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欢迎来到代码小菜的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-01-20T10:20:14.357Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>白也</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>接口</title>
    <link href="http://example.com/2023/01/20/%E6%8E%A5%E5%8F%A3/"/>
    <id>http://example.com/2023/01/20/%E6%8E%A5%E5%8F%A3/</id>
    <published>2023-01-20T08:45:15.801Z</published>
    <updated>2023-01-20T10:20:14.357Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>使用接口关键字interface来定义一个接口。接口的定义和类的定义很相似，分为接口声明和接口体。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Printable</span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> MAX=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">float</span> <span class="title function_">sum</span><span class="params">(<span class="type">float</span> x,<span class="type">float</span> y)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>接口声明</p><p>定义接口包含接口声明和接口体，和类不同的是，定义接口时使用关键字interface来声明自己是一个接口体，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interface 接口的名称</span><br></pre></td></tr></table></figure></li><li><p>接口体</p><p>接口体中包含常量的声明（没有变量）和抽象方法。接口体中只有抽象方法，没有普通的方法，而且接口体中所有的常量的访问权限一定是public,而且是static常量（允许省略public、final和static修饰符）</p></li></ul><h2 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h2><p>1.类实现接口</p><p>在java语言中，接口由类来实现以便使用接口中的方法。一个类需要在类声明中使用关键字implements声明来实现一个接口或多个接口。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">implements</span> <span class="title class_">Printable</span>,Addable</span><br></pre></td></tr></table></figure><p>2.重写接口中的方法</p><p>如果一个非抽象类实现了某个接口，那么这个类必须重写这个接口中的所有方法。需要注意的是，由于接口中的方法一定是public abstract方法，所以在重写接口方法时，不仅要去掉abstract修饰符，给出方法体，而且方法的访问权限一定要用明显的public来修饰。</p><h2 id="接口回调"><a href="#接口回调" class="headerlink" title="接口回调"></a>接口回调</h2><p>接口属于引用型变量，接口变量中可以存放实现该接口的类的实例的引用，即对象的引用，比如Com是一个接口，可以用Com来声明一个变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Com com;</span><br></pre></td></tr></table></figure><p>此时com是一个空接口，因为com变量中还没有存放该接口的类的实例</p><p>假设A类是实现Com接口的类，用A类创建的实例名字为object,那么object不仅可以调用A类的方法，还可以调用A类实现的接口方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A object=<span class="keyword">new</span> <span class="title class_">A</span>();</span><br></pre></td></tr></table></figure><p>接口回调是指：可以把实现某一接口的类创建的对象的引用赋值给该接口声明的接口变量，那么该接口变量就可以调用被该类实现的接口方法。实际上当接口变量调用该类实现的接口方法时，就是通知相应的对象调用这个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com=object;</span><br></pre></td></tr></table></figure><p>注：接口无法调用类中的其他的非接口方法。</p><h2 id="接口和abstract的比较"><a href="#接口和abstract的比较" class="headerlink" title="接口和abstract的比较"></a>接口和abstract的比较</h2><ul><li>abstract类 和接口都可以有abstract方法</li><li>接口中只可以常量，不能有变量，而abstract类中既可以有常量，也可以有变量</li><li>abstract类中业可以有非abstract方法，接口不可以</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;接口&quot;&gt;&lt;a href=&quot;#接口&quot; class=&quot;headerlink&quot; title=&quot;接口&quot;&gt;&lt;/a&gt;接口&lt;/h2&gt;&lt;p&gt;使用接口关键字interface来定义一个接口。接口的定义和类的定义很相似，分为接口声明和接口体。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;figu</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>子类与继承</title>
    <link href="http://example.com/2023/01/18/%E5%AD%90%E7%B1%BB%E4%B8%8E%E7%BB%A7%E6%89%BF/"/>
    <id>http://example.com/2023/01/18/%E5%AD%90%E7%B1%BB%E4%B8%8E%E7%BB%A7%E6%89%BF/</id>
    <published>2023-01-18T09:58:34.552Z</published>
    <updated>2023-01-20T07:16:23.966Z</updated>
    
    <content type="html"><![CDATA[<h3 id="子类与继承"><a href="#子类与继承" class="headerlink" title="子类与继承"></a>子类与继承</h3><p>在类的声明中，通过使用关键字extends来定义一个类的关键字，格式如下：</p><p>class 子类名 extends 父类名{</p><p>}</p><h4 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h4><p>java中object类是所有类的祖先类，任何类都是Object类的子孙类。</p><p>每一个类（除了Object类）有且仅有一个父类，一个类可以有多个或零个子类。</p><p>如果一个类的声明中没有使用extends关键字，这个类被系统默认是object的子类，即类声明class A等价于class A extends Object</p><h4 id="子类的继承性"><a href="#子类的继承性" class="headerlink" title="子类的继承性"></a>子类的继承性</h4><p>子类和父类在同一个包，子类继承了父类中非private变量和非private方法。</p><p>子类和父类不在同一个包里，子类继承父类中非友好变量，方法和非private变量，方法。</p><h4 id="protected的进一步说明"><a href="#protected的进一步说明" class="headerlink" title="protected的进一步说明"></a>protected的进一步说明</h4><p>用D类中使用D类变量，可以通过‘.’来访问D的protected变量和方法。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    Teacher()&#123;</span><br><span class="line">        School=<span class="string">&quot;XXX&quot;</span>;</span><br><span class="line">        Salary=<span class="number">2000</span>;</span><br><span class="line">        Kind=<span class="string">&quot;XX&quot;</span>;</span><br><span class="line">        age=<span class="number">25</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">Print</span><span class="params">(Teacher r)</span>&#123;</span><br><span class="line">        System.out.println(School);</span><br><span class="line">        System.out.println(Salary);</span><br><span class="line">        System.out.println(Kind);</span><br><span class="line">        System.out.println(age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> String School;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> Salary;</span><br><span class="line">    <span class="keyword">public</span> String Kind;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里创建了一个Teacher类，声明了四种权限的成员变量。</p><hr><p>在其他类中使用D类对象,这里其他类指other类，例如在other类中创建了一个object对象</p><ul><li>对于子类D自己声明的protected成员变量和方法，只要other类和D类在同一个包里。object可以访问这些protected变量和方法。</li><li>对于子类从父类继承来的protected成员变量和方法，只要追溯到这些protected成员变量和方法，所在祖先类，例如是A类，只要A类和other类在同一个包里，object对象能访问继承的protected变量和方法。</li></ul><h4 id="关于instanceof运算符"><a href="#关于instanceof运算符" class="headerlink" title="关于instanceof运算符"></a>关于instanceof运算符</h4><p>instanceof运算符是java独有的双目运算符，左面操作元是对象，右面操作元是类。</p><p>当左面操作元是右面类及其子类创建的对象时，instanceof运算结果是true，否则是false。</p><h4 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h4><p>子类一旦隐藏了继承的成员变量，那么子类创建的对象就不在拥有改变量，改变量归super关键字所有，同样子类一旦隐藏了继承的方法，那么子类创建的对象就不在拥有该方法，该方法的调用有super负责。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">Print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是人&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">People</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">Print</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.Print();</span><br><span class="line">        System.out.println(<span class="string">&quot;我是学生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Student stu=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        stu.Print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我是人</span><br><span class="line">我是学生</span><br></pre></td></tr></table></figure><p>在子类中调用父类的构造函数，需要使用super关键字，而且super必须是子类构造函数的头一句，如果没有在子类的构造方法中写出super关键字来调用父类构造方法，那么默认的有super();</p><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.javafx.scene.traversal.SubSceneTraversalEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    People(String name,<span class="type">int</span> age)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了People类的构造函数&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">Print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是人&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">People</span>&#123;</span><br><span class="line">    Student(String name,<span class="type">int</span> age)&#123;</span><br><span class="line">        <span class="built_in">super</span>(name,age);</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了Student类的构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">Print</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.Print();</span><br><span class="line">        System.out.println(<span class="string">&quot;我是学生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Student stu=<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;白也&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        stu.Print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">调用了People类的构造函数</span><br><span class="line">调用了Student类的构造函数</span><br><span class="line">我是人</span><br><span class="line">我是学生</span><br></pre></td></tr></table></figure><h4 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h4><p>可以使用final关键字将类声明为final类。final类不能继承。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>final方法</p><p>如果使用final方法修饰父类中的一个方法，那么这个方法不允许重写，也就是说不允许子类隐藏继承的final方法</p><p>常量用final修饰，运行期间不允许改变，所以final常量在声明是就必须给默认值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;子类与继承&quot;&gt;&lt;a href=&quot;#子类与继承&quot; class=&quot;headerlink&quot; title=&quot;子类与继承&quot;&gt;&lt;/a&gt;子类与继承&lt;/h3&gt;&lt;p&gt;在类的声明中，通过使用关键字extends来定义一个类的关键字，格式如下：&lt;/p&gt;
&lt;p&gt;class 子类名 ext</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java类与对象</title>
    <link href="http://example.com/2023/01/16/java%E5%85%B3%E4%BA%8E%E7%B1%BB%E7%9A%84%E7%BB%86%E8%8A%82/"/>
    <id>http://example.com/2023/01/16/java%E5%85%B3%E4%BA%8E%E7%B1%BB%E7%9A%84%E7%BB%86%E8%8A%82/</id>
    <published>2023-01-16T02:32:15.391Z</published>
    <updated>2023-01-18T01:49:05.152Z</updated>
    
    <content type="html"><![CDATA[<h3 id="局部变量和成员变量"><a href="#局部变量和成员变量" class="headerlink" title="局部变量和成员变量"></a>局部变量和成员变量</h3><ul><li>局部变量没有默认值，成员变量有默认值</li><li>局部变量和成员变量同名，成员变量将会被隐藏，要使用成员变量需要用this方法</li></ul><hr><h3 id="引用其他类"><a href="#引用其他类" class="headerlink" title="引用其他类"></a>引用其他类</h3><p>这里设定两个java文件，Point.java和Class.java，它们在同一目录下，Point.java存放的是一个类，Class.java是程序入口</p><p>Point.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>&#123;</span><br><span class="line">Point(<span class="type">int</span> x0,<span class="type">int</span> y0)&#123;</span><br><span class="line">x=x0;</span><br><span class="line">    y=y0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">Print</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">System.out.println(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Class.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Class</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String argc[])</span>&#123;</span><br><span class="line">Point x=<span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">x.Print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在编辑Class.java过程中，java系统会自动编辑Point.java，因为程序需要使用Point.java源文件产生的字节码文件。编辑通过后，目录下会生成Point.class字节码文件。</p><p>注：C++不同的是，java不需要引用其他类的头文件</p><hr><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>可变参数是指在声明方法是不给出参数列表中从某项开始直至最后一项参数的名字和个数，但是这些参数的类型必须相同。可变参数使用“…”表示若干个参数，这些参数类型必须相同，并且最后一个参数必须是方法的参数列表中的最后一个参数</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> ... x)</span>;</span><br></pre></td></tr></table></figure><p>可变参数使用下标的方式来使用，即x[0],x[1],x[2]，x.length表示可变参数的长度</p><hr><h3 id="静态变量-类变量"><a href="#静态变量-类变量" class="headerlink" title="静态变量(类变量)"></a>静态变量(类变量)</h3><p>该类所有对象共享的变量</p><p>访问方式</p><p>以对象的数据成员访问</p><p>已类名直接访问</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;局部变量和成员变量&quot;&gt;&lt;a href=&quot;#局部变量和成员变量&quot; class=&quot;headerlink&quot; title=&quot;局部变量和成员变量&quot;&gt;&lt;/a&gt;局部变量和成员变量&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;局部变量没有默认值，成员变量有默认值&lt;/li&gt;
&lt;li&gt;局部变量和成员变</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java数组</title>
    <link href="http://example.com/2023/01/15/java%E6%95%B0%E7%BB%84/"/>
    <id>http://example.com/2023/01/15/java%E6%95%B0%E7%BB%84/</id>
    <published>2023-01-15T11:25:00.557Z</published>
    <updated>2023-01-15T12:20:02.950Z</updated>
    
    <content type="html"><![CDATA[<h3 id="声明数组"><a href="#声明数组" class="headerlink" title="声明数组"></a>声明数组</h3><p>声明数组包括数组变量的名字、数组的类型</p><p>一维数组有以下两种格式</p><ul><li>数组的元素类型 数组名[];</li><li>数组的元素类型 [] 数组名;</li></ul><p>声明二维数组有以下两种格式</p><ul><li>数组的元素类型 数组名 [] []；</li><li>数组的元素类型 [] []数组名</li></ul><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> boy[];</span><br><span class="line">floay []goal;</span><br><span class="line"><span class="type">char</span> cat[][];</span><br><span class="line"><span class="type">char</span> [][]dog;</span><br></pre></td></tr></table></figure><p>可以一次声明多个数组，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> [] a,b;</span><br></pre></td></tr></table></figure><p>需要注意的是，跟C/C++不同，java不允许在声明数组中指定元素的个数，否则将报错。</p><hr><h3 id="为数组分配元素"><a href="#为数组分配元素" class="headerlink" title="为数组分配元素"></a>为数组分配元素</h3><p>声明数组仅仅只是给出了数组变量的名字和元素的类型，要想真正的使用数组，还必须创建数组，即给数组分配元素。</p><p>格式：数组名 = new 数组元素的类型[数组元素的个数]</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boy = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">4</span>];</span><br></pre></td></tr></table></figure><p>声明数组和创建数组可以一起完成，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> boy[]=<span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> my[][]=<span class="keyword">new</span> <span class="title class_">int</span>[][];</span><br></pre></td></tr></table></figure><p>java采用“数组的数组”声明多维数组，一个二维数组是由多个一维数组组成的，在创建二维数组是可以分别指定构成该二维数组的一维数组的长度，即二维的数的每一维长度可以不一样。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> my[][]=<span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">3</span>][];</span><br></pre></td></tr></table></figure><p>创建了一个二维数组my，由三个一维数组组成，即my[0],my[1],my[2],这三个一维数组的长度是还没有确定的，因此必须创建my的3个一维数组。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my[<span class="number">0</span>]=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];</span><br><span class="line">my[<span class="number">1</span>]=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">my[<span class="number">2</span>]=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">6</span>];</span><br></pre></td></tr></table></figure><p>注：和C/C++不同的是，java允许变量指定数组元素个数例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> size=<span class="number">30</span>;</span><br><span class="line"><span class="type">int</span> a[]=<span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br></pre></td></tr></table></figure><hr><h3 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h3><p>创建数组后，系统会给数组的每一个元素一个默认值，例如float型默认值为0.0，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> my[]=&#123;<span class="number">1.1f</span>,<span class="number">2.2f</span>,<span class="number">3.3f</span>&#125;;</span><br></pre></td></tr></table></figure><p>上述语句等价于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> my[]=<span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">3</span>];</span><br><span class="line">my[<span class="number">0</span>]=<span class="number">1.1f</span>;</span><br><span class="line">my[<span class="number">1</span>]=<span class="number">2.2f</span>;</span><br><span class="line">my[<span class="number">3</span>]=<span class="number">3.3f</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="数组的引用"><a href="#数组的引用" class="headerlink" title="数组的引用"></a>数组的引用</h3><p>数组属于引用型变量，两个相同类型的数组如果具有相同的引用，他们就具有完全相同的元素。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span> b[]=&#123;<span class="number">9</span>,<span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure><p>如果使用了下列复制语句(a,b类型必须相同)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = b;</span><br></pre></td></tr></table></figure><p>那么，a中存放的引用和b的相同(类似于C/C++，a,b指向同一个地址)，系统将释放最初分配给a的元素，使得a的元素和b的元素相同。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Array</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String argc[])</span>&#123;</span><br><span class="line">test1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="type">int</span> b[]=&#123;<span class="number">9</span>,<span class="number">0</span>&#125;;</span><br><span class="line">System.out.println(a[<span class="number">0</span>]+<span class="string">&quot; &quot;</span>+a[<span class="number">1</span>]);<span class="comment">//打印a中元素</span></span><br><span class="line">System.out.println(b[<span class="number">0</span>]+<span class="string">&quot; &quot;</span>+b[<span class="number">1</span>]);<span class="comment">//打印b中元素</span></span><br><span class="line">a = b;<span class="comment">//使用赋值语句，将b的值赋给a</span></span><br><span class="line">System.out.println(a[<span class="number">0</span>]+<span class="string">&quot; &quot;</span>+a[<span class="number">1</span>]);<span class="comment">//再次打印a中元素</span></span><br><span class="line">System.out.println(b[<span class="number">0</span>]+<span class="string">&quot; &quot;</span>+b[<span class="number">1</span>]);<span class="comment">//再次打印b中元素</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">9</span> <span class="number">0</span></span><br><span class="line"><span class="number">9</span> <span class="number">0</span></span><br><span class="line"><span class="number">9</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>这个时候如果改变a的值或者改变b的值，a,b的值会同时改变。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Array</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String argc[])</span>&#123;</span><br><span class="line">test1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="type">int</span> b[]=&#123;<span class="number">9</span>,<span class="number">0</span>&#125;;</span><br><span class="line">System.out.println(a[<span class="number">0</span>]+<span class="string">&quot; &quot;</span>+a[<span class="number">1</span>]);<span class="comment">//打印a中元素</span></span><br><span class="line">System.out.println(b[<span class="number">0</span>]+<span class="string">&quot; &quot;</span>+b[<span class="number">1</span>]);<span class="comment">//打印b中元素</span></span><br><span class="line">a = b;<span class="comment">//使用赋值语句，将b的值赋给a</span></span><br><span class="line">System.out.println(a[<span class="number">0</span>]+<span class="string">&quot; &quot;</span>+a[<span class="number">1</span>]);<span class="comment">//再次打印a中元素</span></span><br><span class="line">System.out.println(b[<span class="number">0</span>]+<span class="string">&quot; &quot;</span>+b[<span class="number">1</span>]);<span class="comment">//再次打印b中元素</span></span><br><span class="line">a[<span class="number">0</span>]=<span class="number">999</span>;</span><br><span class="line">a[<span class="number">1</span>]=<span class="number">888</span>;</span><br><span class="line">System.out.println(a[<span class="number">0</span>]+<span class="string">&quot; &quot;</span>+a[<span class="number">1</span>]);<span class="comment">//再次打印a中元素</span></span><br><span class="line">System.out.println(b[<span class="number">0</span>]+<span class="string">&quot; &quot;</span>+b[<span class="number">1</span>]);<span class="comment">//再次打印b中元素</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 2</span><br><span class="line">9 0</span><br><span class="line">9 0</span><br><span class="line">9 0</span><br><span class="line">999 888</span><br><span class="line">999 888</span><br></pre></td></tr></table></figure><p>打印数组的引用(类似C的地址)，直接输出数组名即可，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="type">int</span> b[]=&#123;<span class="number">9</span>,<span class="number">0</span>&#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;a的引用：&quot;</span>+a);</span><br><span class="line">System.out.println(<span class="string">&quot;b的引用：&quot;</span>+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a的引用：[I@15db9742</span><br><span class="line">b的引用：[I@6d06d69c</span><br></pre></td></tr></table></figure><p>同时对于char类型的数组的引用，直接使用println输出，会打印数组的所有元素。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">char</span> a[]=&#123;<span class="string">&#x27;我&#x27;</span>,<span class="string">&#x27;爱&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我爱java</span><br></pre></td></tr></table></figure><p>若想打印char类型数组的引用，需要让数组和字符串做并置运算。z这个字符串可以是任意的。例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">char</span> a[]=&#123;<span class="string">&#x27;我&#x27;</span>,<span class="string">&#x27;爱&#x27;</span>,<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>+a);</span><br><span class="line">System.out.println(<span class="string">&quot;java是世界上最好的语言。&quot;</span>+a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我爱java</span><br><span class="line">[C@15db9742</span><br><span class="line">java是世界上最好的语言。[C@15db9742</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;声明数组&quot;&gt;&lt;a href=&quot;#声明数组&quot; class=&quot;headerlink&quot; title=&quot;声明数组&quot;&gt;&lt;/a&gt;声明数组&lt;/h3&gt;&lt;p&gt;声明数组包括数组变量的名字、数组的类型&lt;/p&gt;
&lt;p&gt;一维数组有以下两种格式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组的元素类型 数组</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java基本数据的输入和输出</title>
    <link href="http://example.com/2023/01/15/java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%9A%84%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/"/>
    <id>http://example.com/2023/01/15/java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%9A%84%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/</id>
    <published>2023-01-15T08:59:13.833Z</published>
    <updated>2023-01-15T11:18:45.210Z</updated>
    
    <content type="html"><![CDATA[<h5 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h5><p>使用Scanner类创建一个对象，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br></pre></td></tr></table></figure><p> 然后使用reader对象调用下列方法，读取用户在命令行输入的各种基本数据类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nextBoolean(),nextByte(),next <span class="title function_">Short</span><span class="params">()</span>,nextInt(),nextLong(),nextFloat(),nextDouble()</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CinOrCout</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String argc[])</span>&#123;</span><br><span class="line">test2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;请输入若干数字,以数字0结束&quot;</span>);</span><br><span class="line">Scanner reader=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span> x=reader.nextInt();</span><br><span class="line"><span class="keyword">while</span>(x!=<span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;x = &quot;</span>+x);</span><br><span class="line">x=reader.nextInt();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><p>println和print可输出串值、表达式的值。二者区别是前者输出数据换行，后者输出数据不换行。允许使用并置符合“+”将变量、表达式或常数值等一起输出。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;年龄&quot;</span>+<span class="number">20</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;表达式值为：&quot;</span>+<span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>另外增加了类似于C语言的printf函数</p><p>格式：System.out.printf(“格式控制部分”,表达式一,表达式二,…,表达式n);</p><table><thead><tr><th align="center">控制符号</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">%d</td><td align="center">输出int类型数据</td></tr><tr><td align="center">%c</td><td align="center">输出char类型数据</td></tr><tr><td align="center">%f</td><td align="center">输出浮点型数据，小数部分保留6位</td></tr><tr><td align="center">%s</td><td align="center">输出字符串</td></tr><tr><td align="center">%md</td><td align="center">输出的int数据占m列、</td></tr><tr><td align="center">%m.nf</td><td align="center">输出的浮点型数据占m列，小数保留n位</td></tr></tbody></table><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">&quot;%d,%3.4f&quot;</span>,<span class="number">200</span>,<span class="number">3.14159</span>);</span><br></pre></td></tr></table></figure><p>结果为：200,3.1416,   400</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;输入&quot;&gt;&lt;a href=&quot;#输入&quot; class=&quot;headerlink&quot; title=&quot;输入&quot;&gt;&lt;/a&gt;输入&lt;/h5&gt;&lt;p&gt;使用Scanner类创建一个对象，如：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java基本数据类型转换</title>
    <link href="http://example.com/2023/01/15/java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>http://example.com/2023/01/15/java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</id>
    <published>2023-01-15T08:32:28.373Z</published>
    <updated>2023-01-15T08:55:27.327Z</updated>
    
    <content type="html"><![CDATA[<p>当把一种基本数据类型的值赋给另一种变量时，就涉及到数据转换。</p><p>将这些类型按精读由低到高排列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="type">short</span> <span class="type">char</span> <span class="type">int</span> <span class="type">long</span> <span class="type">float</span> <span class="type">double</span></span><br></pre></td></tr></table></figure><h4 id="低级别转换为高级别"><a href="#低级别转换为高级别" class="headerlink" title="低级别转换为高级别"></a>低级别转换为高级别</h4><p>当把级别低的变量的值赋给级别高的变量时，系统会自动完成数据类型的转换，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> x=<span class="number">100</span></span><br></pre></td></tr></table></figure><p>输出x的值将会是100.0</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x=<span class="number">50</span>;</span><br><span class="line"><span class="type">float</span> y;</span><br><span class="line">y=x;</span><br></pre></td></tr></table></figure><p>输出y的值，结果将会是50.0</p><h4 id="高级别转化为低级别"><a href="#高级别转化为低级别" class="headerlink" title="高级别转化为低级别"></a>高级别转化为低级别</h4><p>当把高级别转换为低级别时，必须使用类型转换运算。</p><p>格式为：（类型名）要转换的值；</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int x=(int)34.89;</span><br><span class="line">long y=(long)56.98F;</span><br><span class="line">int z=(int)1999L;</span><br></pre></td></tr></table></figure><p>输出x,y,z结果为：34，56,1999</p><hr><p>当把一个int类型数据赋值给byte、short、char类型变量时，不可能超出这些变量的取值范围否者必须进行类型转换。</p><p>如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">byte a=(byte)128;</span><br><span class="line">byte b=(byte)-129;</span><br></pre></td></tr></table></figure><p>a和b得到的值分别为128和127</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当把一种基本数据类型的值赋给另一种变量时，就涉及到数据转换。&lt;/p&gt;
&lt;p&gt;将这些类型按精读由低到高排列：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>java基本数据类型</title>
    <link href="http://example.com/2023/01/15/java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://example.com/2023/01/15/java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2023-01-15T02:53:06.986Z</published>
    <updated>2023-01-15T07:13:00.064Z</updated>
    
    <content type="html"><![CDATA[<h3 id="标识符与关键字"><a href="#标识符与关键字" class="headerlink" title="标识符与关键字"></a>标识符与关键字</h3><h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><ul><li>标识符由字母、下划线、美元符号和数字组成</li><li>标识符的第一个字符不能是数字字符</li><li>标识符不能是关键字</li><li>标识符不能是true、false、null（尽管这些都不是关键字）</li></ul><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><p>java共有50个关键字</p><blockquote><p>abstract assert boolean break byte case catch char class const continue default do double else enum extends final finally float for if goto implements import instanceof int interface long native new package private protected public return short static strictfp super switch synchronized this<br>throw throws transient try void volatile while</p></blockquote><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ol><li><p>逻辑类型</p><ul><li><p>常量：true,false</p></li><li><p>变量：使用关键字boolean来声明逻辑变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> male=<span class="literal">true</span>,on=<span class="literal">true</span>,off=<span class="literal">false</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>整数类型</p><ol><li><p>int型</p><p>常量：123,6000(十进制)，077(八进制)，0x3ABC(十六进制)</p><p>变量：使用关键字int来声明int型变量</p><p>int类型数据占4字节，取值范围-2^31~2^31-1</p></li><li><p>byte型</p><p>变量使用byte关键字声明，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> x=-<span class="number">12</span>,y=<span class="number">36</span>;</span><br></pre></td></tr></table></figure><p>不存在byte常量，可以把一定范围内的整型转化为byte类型,例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x= -<span class="number">20</span>,y=<span class="number">30</span>;</span><br><span class="line">x=(<span class="type">byte</span>)x;</span><br><span class="line">y=(<span class="type">byte</span>)y;</span><br></pre></td></tr></table></figure><p>byte占1个字节，取值范围-2^7~2^7-1</p></li><li><p>short型</p><p>变量使用short关键字声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">short</span> x=<span class="number">30</span>,y=<span class="number">60</span>;</span><br></pre></td></tr></table></figure><p>跟byte类型一样，不存在short类型的常量，也可以把一定范围内的int类型数据赋值给short类型</p><p>short占2字节，取值范围-2^15~2^15-1</p></li><li><p>long型</p><p>常量：long型常量用后缀L来表示，例如108L(十进制)，07123L(8进制），0x3ACL(十六进制)</p><p>变量使用long关键字声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> x=<span class="number">130L</span>,y=<span class="number">300L</span>;</span><br></pre></td></tr></table></figure><p>long占8字节，取值范围：-2^63~2^63-1</p><p>注：java不存在无符号的byte,short,int,long</p></li></ol></li><li><p>字符类型</p><p>常量：’A‘,’\t’等，用单引号</p><p>变量：使用char关键字声明，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> ch=<span class="string">&#x27;A&#x27;</span>,home=<span class="string">&#x27;家&#x27;</span>;</span><br></pre></td></tr></table></figure><p>注：Windows使用中文时要把文件编码改成ANSI编码</p><p>char类型占2字节，char取值为0~65535对于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> x=<span class="string">&#x27;a&#x27;</span></span><br></pre></td></tr></table></figure><p>内存x中存储的是97,97是a在Unicode字符集中的排序位置，所以允许将上满变量写成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> x=<span class="number">97</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">转义字符</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">\n</td><td align="center">换行</td></tr><tr><td align="center">\b</td><td align="center">退格</td></tr><tr><td align="center">\t</td><td align="center">水平制表符</td></tr><tr><td align="center">\ ‘</td><td align="center">单引号</td></tr><tr><td align="center">\ ‘’</td><td align="center">双引号</td></tr><tr><td align="center">\ \</td><td align="center">反斜杠</td></tr></tbody></table></li><li><p>浮点类型</p><ol><li><p>float型</p><p>常量 ：453.549f，3.1458f(小数表示法)，2e40f(2乘10的40次方)(指数表示)</p><p>注：常量后面必须有f或F</p><p>变量：使用关键字float声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> x=<span class="number">22.76f</span>,y=<span class="number">3.14159f</span>;</span><br></pre></td></tr></table></figure><p>float变量存储float型数据时，保留8位有效数字</p><p>float类型数据占4字节，取值范围1.4E-45<del>3.4028235E38和-3.4028235E38</del>-1.4E-45</p></li><li><p>double型</p><p>常量：2.69d，0.05(小数表示法)，1e-90，对于double常量，后面可以有D或d，但允许省略</p><p>变量：使用关键字double来声明double型变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> x=<span class="number">0.02</span>,y=<span class="number">3.14</span>;</span><br></pre></td></tr></table></figure><p>占8字节</p><p>注：float型变量和double型变量的比较，要注意数据实际精度</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> x=<span class="number">0.4f</span>;</span><br><span class="line"><span class="type">double</span> y=<span class="number">0.4</span>;</span><br></pre></td></tr></table></figure><p>变量x数据是0.4000000059604645</p><p>变量y数据是0.4000000000000000</p><p>所以y中数据小于x中数据</p></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;标识符与关键字&quot;&gt;&lt;a href=&quot;#标识符与关键字&quot; class=&quot;headerlink&quot; title=&quot;标识符与关键字&quot;&gt;&lt;/a&gt;标识符与关键字&lt;/h3&gt;&lt;h4 id=&quot;标识符&quot;&gt;&lt;a href=&quot;#标识符&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Mysql学习</title>
    <link href="http://example.com/2023/01/14/Mysql%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2023/01/14/Mysql%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-01-14T04:37:17.000Z</published>
    <updated>2023-01-14T04:37:59.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql的使用"><a href="#mysql的使用" class="headerlink" title="mysql的使用"></a>mysql的使用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>切换表单 use +表名</p><p>查询当前数据库 select database();</p><h2 id="1-DDL语句"><a href="#1-DDL语句" class="headerlink" title="1.DDL语句"></a>1.DDL语句</h2><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><ul><li>show databases;查询所有数据</li><li>create database 数据库名；</li><li>use 数据库名；切换数据库</li><li>select database();定位当前数据库</li><li>drop database 数据库名；删除数据库</li></ul><h3 id="1-查询"><a href="#1-查询" class="headerlink" title="1.查询"></a>1.查询</h3><ul><li><p>show tables；查询当前数据库所有表；</p></li><li><p>详细查询每个表：</p><p>desc 表名；</p><p>show create table 表名 ；查询指定表的建表数据(即建表时加的注释)</p></li></ul><h3 id="2-创建"><a href="#2-创建" class="headerlink" title="2.创建"></a>2.创建</h3><p>create table 表名（</p><p>字段一 字段1类型[comment 字段一注释]，</p><p>字段二 字段2类型[comment 字段二注释]，</p><p>字段三 字段3类型[comment 字段三注释]，</p><p>……….)[comment 表注释]；</p><p>​    </p><h3 id="3-修改"><a href="#3-修改" class="headerlink" title="3.修改"></a>3.修改</h3><h4 id="1-添加"><a href="#1-添加" class="headerlink" title="1.添加"></a>1.添加</h4><p>alter 表名 add 字段名  类型(长度) [commend 注释] [约束]；</p><p>例：将sex数据加入到myfirst表中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table myfirst add sex varchar(3);</span><br></pre></td></tr></table></figure><h4 id="2-修改"><a href="#2-修改" class="headerlink" title="2.修改"></a>2.修改</h4><p><strong>表的修改</strong></p><p>修改表名</p><p>alter table 表名 rename to 新表名；</p><p>例：将 表名 myfirst 改为 first;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table myfirst rename to first;</span><br></pre></td></tr></table></figure><p><strong>数据的修改</strong></p><p>修改数据类型</p><p>alter table 表名modify 字段名 新数据类型(长度)；</p><p>例：将date 数据类型改为varchar</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table myfirst modify date varchar(50);</span><br></pre></td></tr></table></figure><p><strong>修改字段名和字段类型</strong></p><p>alter table 表名 change 旧字段名 新字段名 类型(长度)[commend注释] [约束];</p><p>例：将’日期’改为日期(原来带引号)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table myfirst change ‘日期’  日期  varchar(50);</span><br></pre></td></tr></table></figure><h4 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h4><p>表的删除</p><p>直接删除表</p><p>drop table[if exit] 表名；</p><p>加 if exit 意义 删除表的时候如果表不存在会报错，加上 if exit 即便不存在也不会报错；</p><p>删除del 表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table del;</span><br></pre></td></tr></table></figure><p>删除指定表，并重新创建表</p><p>truncate table 表名；</p><p>相当于删除表内容，留下表结构；</p><p>表内容的删除</p><p>删除字段</p><p>alter table 表名 drop 字段名；</p><p>例：将 data 删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table myfirst drop date;</span><br></pre></td></tr></table></figure><h2 id="2-DML语句"><a href="#2-DML语句" class="headerlink" title="2.DML语句"></a>2.DML语句</h2><h3 id="1-添加数据"><a href="#1-添加数据" class="headerlink" title="1.添加数据"></a>1.添加数据</h3><ul><li><p>给指定字段添加数据</p><p>语法：insert into 表名(字段1，字段2…..)values(值1，值2值3…..)</p><p>例：插入 一个编号为1，姓名为刘汉康的 数据插入到表中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into user(id, name) value (1,&quot;刘汉康&quot;);</span><br></pre></td></tr></table></figure></li><li><p>给全部字段添加数据</p><p>语法 : insert into 表名values(值1，值2….);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into  user values(4,&quot;刘汉康&quot;);</span><br></pre></td></tr></table></figure></li><li><p>批量添加数据</p><p>语法：insert into 表名values(值1，值2…)(值1，值2)(…);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into user values(7,&quot;小明&quot;),(8,&quot;白也&quot;);</span><br></pre></td></tr></table></figure><p>$\textcolor{red}{注意}$</p></li></ul><p>​       $\textcolor{red}{1.插入数据时，指定的字段需要与值的顺序一致}$</p><p>​       $\textcolor{red}{2.字符串和日期类型 数据应该包含在双引号中}$</p><p>​       $\textcolor{red}{3.插入数据的大小，应该在字段的规定范围内}$</p><h3 id="2-更新和删除"><a href="#2-更新和删除" class="headerlink" title="2.更新和删除"></a>2.更新和删除</h3><ul><li><p>修改数据</p><p>语法：update 表名 set 字段名1=值1 ，字段名2 =值2，….{where 条件};</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update user set name = &quot;赵无极&quot; where name = &quot;ddd&quot;;</span><br><span class="line">update user set name = &quot;陈平安&quot;,id=10 where id=10;</span><br></pre></td></tr></table></figure><p>$\textcolor{red}{注意:修改条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据。}$</p></li><li><p>删除数据</p><p>语法：delete from 表名 [where 条件]；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure><p>$\textcolor{red}{注意:删除条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数据。}$</p></li></ul><h2 id="3-DQL语句"><a href="#3-DQL语句" class="headerlink" title="3.DQL语句"></a>3.DQL语句</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul><li><p>基本查询</p><p>语法：select  字段1，字段2，字段3… from 表名；</p><p>​            select * form  表名;//查询所有数据</p><p>​            select 字段 as 加别名；</p><p>​            select distinct 字段 表名；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select id,name,age from emp;//部分字段</span><br><span class="line">select * from emp;//查询所有数据</span><br><span class="line">select workaddress as 工作地点 from emp;</span><br><span class="line">select distinct workaddress as 工作地点 from emp;//去除重复记录</span><br></pre></td></tr></table></figure></li><li><p>条件查询</p><p><img src="D:\CodeStudy\数据库\条件查询表.png"></p><p>语法：select 字段列表 from 表名 where 条件列表；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where id&lt;=10;</span><br><span class="line">select * from emp where age between 15 and 20;等价于select * from emp where age&gt;=15 &amp;&amp;age &lt;=20;</span><br><span class="line">select * from emp where  name like&quot;__&quot;;//查询名字为两个字符的</span><br><span class="line">select * from emp where idcard like &quot;%x&quot;;//结尾为x的数据</span><br></pre></td></tr></table></figure><p>$\textcolor{red}{注：between 后跟范围较小值}$</p></li><li><p>分组查询</p><p>语法：select 字段列表 from 表名 [where 条件] group by 分组字段名[having 分组后过滤条件]；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select gender,count(*) from emp group by gender;</span><br><span class="line">select gender,avg(age) from emp group by gender;</span><br><span class="line">select gender,count(*) from emp where age&lt;=45  group by workaddress;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>$\textcolor{red}{注：where和having区别}$</p><p>$\textcolor{red}{执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果过滤}$</p><p>$\textcolor{red}{判断条件不同：where不能对聚合函数进行判断，而having可以}$</p><p>$\textcolor{red}{注意}$</p><p>$\textcolor{red}{执行顺序 where&gt;聚合函数&gt;having}$</p><p>$\textcolor{red}{分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义}$</p></li></ul><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><ol><li><p>聚合函数将一列数作为一个整体，进行纵向计算</p></li><li><p>常见聚合函数</p><p>count  统计数量</p><p>max     最大值</p><p>min      最小值</p><p>avg       平均值</p><p>sum      求和</p></li><li><p>使用语法</p><p>select 聚合函数(字段列表) from 表名[亦可加约束条件]；</p><p>$\textcolor{red}{注：null值不参与所有聚合函数运算}$</p><p>使用例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select  count(*) from emp;</span><br><span class="line">select  avg(age) from emp;</span><br><span class="line">select max(age) from emp;</span><br><span class="line">select min(age) from emp;</span><br><span class="line">select avg(age) from emp where workaddress=&quot;西安&quot;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mysql的使用&quot;&gt;&lt;a href=&quot;#mysql的使用&quot; class=&quot;headerlink&quot; title=&quot;mysql的使用&quot;&gt;&lt;/a&gt;mysql的使用&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="http://example.com/2023/01/14/Markdown%E8%AF%AD%E6%B3%95/"/>
    <id>http://example.com/2023/01/14/Markdown%E8%AF%AD%E6%B3%95/</id>
    <published>2023-01-14T04:35:56.000Z</published>
    <updated>2023-01-14T04:36:30.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="typora的使用"><a href="#typora的使用" class="headerlink" title="typora的使用"></a>typora的使用</h1><p>里面加代码一般不会被渲染出来</p><p>(** 内容**)</p><p><strong>加粗</strong></p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><ol><li>第一点</li><li>第二点</li><li>第三点</li><li>第四点<ol><li>（分节摁tab键）</li></ol></li><li>不填内容摁回车跳转回上一节（或者按删除）</li></ol><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><ul><li><p>无序列表（星号加空格）</p></li><li><p>你是</p></li><li><p>s</p></li><li></li></ul><h2 id="表格（快捷键crtl-T"><a href="#表格（快捷键crtl-T" class="headerlink" title="表格（快捷键crtl+T)"></a>表格（快捷键crtl+T)</h2><table><thead><tr><th align="right"></th><th></th><th></th></tr></thead><tbody><tr><td align="right"></td><td></td><td></td></tr><tr><td align="right"></td><td></td><td></td></tr><tr><td align="right"></td><td></td><td></td></tr></tbody></table><h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><ol><li>行内公式（嵌入在文本中）</li><li>行外公式（一般单独一行）</li></ol><h2 id="代码（反引号）"><a href="#代码（反引号）" class="headerlink" title="代码（反引号）"></a>代码（反引号）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="链接和图片"><a href="#链接和图片" class="headerlink" title="链接和图片"></a>链接和图片</h2><p>感叹号+中括号+括号（！<a href=""></a>）</p><p>图片</p><p><img src="C:\Users\刘汉康\Pictures\2021-08\IMG_20210805_190545.jpg"></p><p><a href="https://i1.hdslb.com/bfs/face/68a8fe81d9eaaa76dc2bca0a38f3de8a22d12ced.jpg@240w_240h_1c_1s.webp">链接地址</a></p><p>（crtl+点击跳转）</p><h2 id="分栏符"><a href="#分栏符" class="headerlink" title="分栏符"></a>分栏符</h2><p>(___三个杠)</p><hr><p>引用</p><p>(&gt;号)</p><blockquote><p>文本引用</p><p>参考文献</p><ol><li>第一</li><li>第二</li></ol></blockquote><hr><h2 id="文件导出"><a href="#文件导出" class="headerlink" title="文件导出"></a>文件导出</h2><p>可以导出各种文件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;typora的使用&quot;&gt;&lt;a href=&quot;#typora的使用&quot; class=&quot;headerlink&quot; title=&quot;typora的使用&quot;&gt;&lt;/a&gt;typora的使用&lt;/h1&gt;&lt;p&gt;里面加代码一般不会被渲染出来&lt;/p&gt;
&lt;p&gt;(** 内容**)&lt;/p&gt;
&lt;p&gt;&lt;st</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="http://example.com/2023/01/14/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2023/01/14/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2023-01-14T01:29:01.000Z</published>
    <updated>2023-01-14T04:30:16.196Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h2><p>参考<a href="https://zhuanlan.zhihu.com/p/44213627">hexo超完整的搭建教程，让你拥有一个专属个人博客 - 知乎 (zhihu.com)</a></p><p>博客园<a href="https://www.cnblogs.com/liyuelian/p/17048195.html">Hexo博客搭建记录 - 一刀一个小西瓜 - 博客园 (cnblogs.com)</a>构建成功</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第一篇博客&quot;&gt;&lt;a href=&quot;#第一篇博客&quot; class=&quot;headerlink&quot; title=&quot;第一篇博客&quot;&gt;&lt;/a&gt;第一篇博客&lt;/h2&gt;&lt;p&gt;参考&lt;a href=&quot;https://zhuanlan.zhihu.com/p/44213627&quot;&gt;hexo超完整的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/01/14/hello-world/"/>
    <id>http://example.com/2023/01/14/hello-world/</id>
    <published>2023-01-14T01:24:13.684Z</published>
    <updated>1985-10-26T08:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
